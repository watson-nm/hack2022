"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __importStar(require("../utils"));
var magic_items_json_1 = __importDefault(require("./magic_items.json"));
var genericData_json_1 = __importDefault(require("../genericData.json"));
var names_1 = __importDefault(require("../names"));
var _type = function () { return Utils.pick(magic_items_json_1.default.types); };
var _powerLevel = function () { return Utils.pick(magic_items_json_1.default.power_levels); };
var _schoolOfMagic = function (type) {
    if (type === "weapon") {
        return Utils.pick(Object.keys(magic_items_json_1.default.school_weapon_effects_per_level));
    }
    return Utils.pick(magic_items_json_1.default.schools_of_magic);
};
var _effects = function (schoolOfMagic, powerLevel) {
    // each power level of magic item can have a random number of effects. we leverage the template
    // parser to choose a number of effects
    var effectsCount = Utils.parseTemplate(magic_items_json_1.default.item_effects_per_level[powerLevel]);
    // pick a number of effects for the school and power level, for the count of effectsCount
    // we then run each effect through the template parser too, as the effects themselves contain parseable text
    return Utils.pickMany(magic_items_json_1.default.school_weapon_effects_per_level[schoolOfMagic][powerLevel], parseInt(effectsCount)).map(Utils.parseTemplate);
};
var _tagline = function (formattedData) {
    var taglineTemplate = Utils.pick(magic_items_json_1.default.tagline_templates);
    var generationContent = {};
    if (taglineTemplate.includes("tagline_owned_word")) {
        generationContent.tagline_owned_word = Utils.pick(magic_items_json_1.default.tagline_owned_words);
    }
    if (taglineTemplate.includes("owner_first_name_possessive")) {
        var ownerFirstName = formattedData.owner.split(" ")[0];
        generationContent.owner_first_name_possessive =
            ownerFirstName.substr(-1) === "s"
                ? ownerFirstName + "'"
                : ownerFirstName + "'s";
    }
    return Utils.parseTemplate(taglineTemplate, generationContent);
};
var generate = function (props) {
    if (props === void 0) { props = {}; }
    var seed = props.seed, type = props.type, powerLevel = props.powerLevel, schoolOfMagic = props.schoolOfMagic, effects = props.effects, subtype = props.subtype;
    seed = seed || Utils.FantasyContentGeneratorSeed || Utils.generateUUID();
    return Utils.withSeed(seed, function () {
        type = type ? type : _type();
        powerLevel = powerLevel ? powerLevel : _powerLevel();
        schoolOfMagic = schoolOfMagic ? schoolOfMagic : _schoolOfMagic(type);
        effects = effects ? effects : _effects(schoolOfMagic, powerLevel);
        subtype = subtype ? subtype : Utils.pick(genericData_json_1.default[type]);
        var formattedData = {};
        switch (powerLevel) {
            case "greater":
            case "supreme":
                formattedData.owner = names_1.default.generate().name;
                formattedData.tagline = _tagline(formattedData);
                break;
        }
        formattedData.title = subtype + " of " + Utils.titleCase(powerLevel) + " " + Utils.titleCase(schoolOfMagic);
        return {
            seed: seed,
            type: type,
            subtype: subtype,
            powerLevel: powerLevel,
            schoolOfMagic: schoolOfMagic,
            effects: effects,
            formattedData: formattedData
        };
    });
};
var functions = {
    generate: generate
};
exports.default = functions;
