"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __importStar(require("../utils"));
var monster_json_1 = __importDefault(require("./monster.json"));
exports.generate = function (props) {
    if (props === void 0) { props = {}; }
    var type = props.type, seed = props.seed;
    seed = seed || Utils.FantasyContentGeneratorSeed || Utils.generateUUID();
    return Utils.withSeed(seed, function () {
        type = type ? type : Utils.pick(monster_json_1.default.type);
        var attributes = {
            visual_description: Utils.pick(monster_json_1.default["visual_description_" + type]),
            attacks_with: Utils.pick(monster_json_1.default["attacks_with_" + type]),
        };
        var templateVariables = {};
        switch (type) {
            case "swarm":
                var grossSwarmVerbs = Utils.pickMany(monster_json_1.default.gross_swarm_verb, 2);
                templateVariables = __assign(__assign({}, templateVariables), { gross_swarm_verb_1: grossSwarmVerbs[0], gross_swarm_verb_2: grossSwarmVerbs[1] });
                break;
        }
        var formattedDescription = Utils.parseTemplate("This {beast/creature} {looks like/resembles} " + attributes.visual_description + ". It {hunts using/attacks using} " + attributes.attacks_with + ".", templateVariables);
        return {
            seed: seed,
            formattedDescription: formattedDescription,
        };
    });
};
var functions = {
    generate: exports.generate,
};
exports.default = functions;
