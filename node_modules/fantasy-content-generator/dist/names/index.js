"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __importStar(require("../utils"));
var names_json_1 = __importDefault(require("./names.json"));
/**
 * generate a name for a race and gender.
 *
 * @param {string} props.race generate with a specific race
 * @param {string} props.gender generate with a specific gender
 */
var generateName = function (race, gender) {
    var raceTemplates = names_json_1.default[race].templates;
    if (!raceTemplates) {
        throw new Error("could not find race templates for " + race);
    }
    var template = Utils.pick(raceTemplates);
    switch (race) {
        case "dragonborn":
        case "dwarf":
        case "elf":
        case "gnome":
        case "halfling":
        case "human":
            return Utils.parseTemplate(template, {
                first: Utils.pick(names_json_1.default[race][gender]),
                last: Utils.pick(names_json_1.default[race].last),
            });
        case "halfOrc":
            return Utils.parseTemplate(template, {
                humanFirst: Utils.pick(names_json_1.default.human[gender]),
                humanLast: Utils.pick(names_json_1.default.human.last),
                orcFirst: Utils.pick(names_json_1.default.halfOrc[gender]),
            });
        case "halfElf":
            return Utils.parseTemplate(template, {
                humanFirst: Utils.pick(names_json_1.default.human[gender]),
                humanLast: Utils.pick(names_json_1.default.human.last),
                elfFirst: Utils.pick(names_json_1.default.elf[gender]),
                elfLast: Utils.pick(names_json_1.default.elf.last),
            });
        case "tiefling":
            return Utils.parseTemplate(template, {
                humanFirst: Utils.pick(names_json_1.default.human[gender]),
                humanLast: Utils.pick(names_json_1.default.human.last),
                tieflingFirst: Utils.pick(names_json_1.default.tiefling[gender]),
            });
        case "aelfir":
            var _a = Utils.pickMany(names_json_1.default.aelfir.adjective, 2), adjective = _a[0], adjective2 = _a[1];
            var _b = Utils.pickMany(names_json_1.default.aelfir.thing, 2), thing = _b[0], thing2 = _b[1];
            var _c = Utils.pickMany(names_json_1.default.aelfir.passive_emotion, 2), passive_emotion = _c[0], passive_emotion2 = _c[1];
            return Utils.parseTemplate(template, {
                verb_ing: Utils.parseTemplate(Utils.pick(names_json_1.default.aelfir.verb_ing)),
                verb_present: Utils.parseTemplate(Utils.pick(names_json_1.default.aelfir.verb_present)),
                adverb: Utils.parseTemplate(Utils.pick(names_json_1.default.aelfir.adverb)),
                adjective: Utils.parseTemplate(adjective),
                adjective2: Utils.parseTemplate(adjective2),
                preposition: Utils.parseTemplate(Utils.pick(names_json_1.default.aelfir.preposition)),
                preposition_spatial: Utils.parseTemplate(Utils.pick(names_json_1.default.aelfir.preposition_spatial)),
                passive_emotion: Utils.parseTemplate(passive_emotion),
                passive_emotion2: Utils.parseTemplate(passive_emotion2),
                thing: Utils.parseTemplate(thing),
                thing2: Utils.parseTemplate(thing2),
            });
    }
};
exports.generate = function (props) {
    if (props === void 0) { props = {}; }
    var race = props.race, gender = props.gender, seed = props.seed;
    // use the given seed, or one set by withSeed, or generate one
    seed = seed || Utils.FantasyContentGeneratorSeed || Utils.generateUUID();
    // use withSeed to ensure seeded output for all `picks`
    return Utils.withSeed(seed, function () {
        race = race ? race : Utils.pick(Object.keys(names_json_1.default));
        gender = gender ? gender : Utils.randomGender();
        var name = generateName(race, gender);
        var _a = name.split(" "), firstName = _a[0], lastName = _a[1];
        return {
            seed: seed,
            name: name,
            race: race,
            gender: gender,
            firstName: firstName,
            lastName: lastName,
            formattedData: {
                name: name,
                race: Utils.formatRace(race),
                gender: Utils.titleCase(gender),
                firstName: firstName ? Utils.titleCase(firstName) : undefined,
                lastName: lastName ? Utils.titleCase(lastName) : undefined,
            },
        };
    });
};
var functions = {
    generate: exports.generate,
};
// setup a function for each race
Object.keys(names_json_1.default).forEach(function (race) {
    functions[race] = function (props) {
        props.race = race;
        return exports.generate(props);
    };
});
exports.default = functions;
