"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __importStar(require("../utils"));
var index_1 = __importDefault(require("./index"));
describe("Names", function () {
    describe("generating without seed", function () {
        it("generate a name", function () {
            var nameObject = index_1.default.generate();
            expect(nameObject.race).not.toBeUndefined();
            expect(nameObject.gender).not.toBeUndefined();
            expect(nameObject.name).not.toBeUndefined();
            expect(nameObject.seed).not.toBeUndefined();
        });
        it("generate 2 names with different seeds should be different name, race and gender", function () {
            var nameObject1 = index_1.default.generate({ seed: "123" });
            var nameObject2 = index_1.default.generate({ seed: "456" });
            expect(nameObject1).not.toMatchObject(nameObject2);
        });
        it("generating with same race and gender should give a different seed each time", function () {
            var nameObject1 = index_1.default.generate({ race: "tiefling", gender: "male" });
            var nameObject2 = index_1.default.generate({ race: "tiefling", gender: "male" });
            var nameObject3 = index_1.default.generate({ race: "tiefling", gender: "male" });
            expect([nameObject1.seed]).not.toContain(nameObject2.seed);
            expect([nameObject1.seed, nameObject2.seed]).not.toContain(nameObject3.seed);
        });
    });
    describe("generating with a seed", function () {
        describe("generating with seed via props", function () {
            it("generating via name generate with a seed in the props should give the exact same match", function () {
                var nameObject = index_1.default.generate({ seed: "123" });
                expect(nameObject).toMatchObject(index_1.default.generate({ seed: "123" }));
                expect(nameObject).toMatchObject(index_1.default.generate({ seed: "123" }));
                expect(nameObject).toMatchObject(index_1.default.generate({ seed: "123" }));
                expect(nameObject).toMatchObject(index_1.default.generate({ seed: "123" }));
                expect(nameObject).toMatchObject(index_1.default.generate({ seed: "123" }));
            });
        });
        describe("generating with seed via withSeed", function () {
            it("generating via withSeed should give the exact same match", function () {
                var nameObject;
                Utils.withSeed("aaa", function () {
                    nameObject = index_1.default.generate();
                });
                Utils.withSeed("aaa", function () {
                    expect(nameObject).toMatchObject(index_1.default.generate());
                });
                Utils.withSeed("aaa", function () {
                    expect(nameObject).toMatchObject(index_1.default.generate());
                });
                Utils.withSeed("aaa", function () {
                    expect(nameObject).toMatchObject(index_1.default.generate());
                });
                Utils.withSeed("aaa", function () {
                    expect(nameObject).toMatchObject(index_1.default.generate());
                });
            });
        });
    });
});
