"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __importStar(require("../utils"));
var interfaces_1 = require("../interfaces");
var npc_acts_json_1 = __importDefault(require("./npc_acts.json"));
var pc_related_json_1 = __importDefault(require("./pc_related.json"));
var location_based_urban_json_1 = __importDefault(require("./location_based_urban.json"));
var location_based_wilderness_json_1 = __importDefault(require("./location_based_wilderness.json"));
var generate = function (props) {
    if (props === void 0) { props = {}; }
    var seed = props.seed, storyhookBank = props.storyhookBank;
    seed = seed || Utils.FantasyContentGeneratorSeed || Utils.generateUUID();
    storyhookBank = storyhookBank || Utils.pick(Object.values(interfaces_1.eStoryhookBanks));
    var actualStorybank;
    switch (storyhookBank) {
        case interfaces_1.eStoryhookBanks.NPC_ACTS:
            actualStorybank = npc_acts_json_1.default;
            break;
        case interfaces_1.eStoryhookBanks.PC_RELATED:
            actualStorybank = pc_related_json_1.default;
            break;
        case interfaces_1.eStoryhookBanks.LOCATION_BASED_URBAN:
            actualStorybank = location_based_urban_json_1.default;
            break;
        case interfaces_1.eStoryhookBanks.LOCATION_BASED_WILDERNESS:
            actualStorybank = location_based_wilderness_json_1.default;
            break;
    }
    return Utils.withSeed(seed, function () {
        return {
            seed: seed,
            storyhook: Utils.parseTemplate(Utils.pick(actualStorybank)),
            storyhookBank: storyhookBank,
        };
    });
};
var npcActs = function (props) {
    if (props === void 0) { props = {}; }
    return generate(__assign(__assign({}, props), { storyhookBank: interfaces_1.eStoryhookBanks.NPC_ACTS }));
};
var pcRelated = function (props) {
    if (props === void 0) { props = {}; }
    return generate(__assign(__assign({}, props), { storyhookBank: interfaces_1.eStoryhookBanks.PC_RELATED }));
};
var locationBasedUrban = function (props) {
    if (props === void 0) { props = {}; }
    return generate(__assign(__assign({}, props), { storyhookBank: interfaces_1.eStoryhookBanks.LOCATION_BASED_URBAN }));
};
var locationBasedWilderness = function (props) {
    if (props === void 0) { props = {}; }
    return generate(__assign(__assign({}, props), { storyhookBank: interfaces_1.eStoryhookBanks.LOCATION_BASED_WILDERNESS }));
};
var functions = {
    generate: generate,
    npcActs: npcActs,
    pcRelated: pcRelated,
    locationBasedUrban: locationBasedUrban,
    locationBasedWilderness: locationBasedWilderness,
};
exports.default = functions;
